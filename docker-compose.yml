version: '3.8'

services:
  vote:
    image: vote_image
    ports:
      - "5000:8080"
    environment:
      - REDIS_HOST=redis
    depends_on:
      - redis
    networks:
      - backend
    deploy:
      replicas: 2  # Nombre de réplicas pour ce service
      restart_policy:
        condition: on-failure  # Relancer en cas de plantage

  worker:
    image: worker_image
    environment:
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgresql
    depends_on:
      - redis
      - postgresql
    networks:
      - backend
    deploy:
      replicas: 2  # Nombre de réplicas pour ce service
      restart_policy:
        condition: on-failure

  result:
    image: result_image
    ports:
      - "5001:8888"
    environment:
      - POSTGRES_HOST=postgresql
    depends_on:
      - postgresql
    networks:
      - backend
    deploy:
      replicas: 2  # Nombre de réplicas pour ce service
      restart_policy:
        condition: on-failure

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - backend
    deploy:
      replicas: 1  # Redis peut rester avec 1 réplique car c'est un cache centralisé
      restart_policy:
        condition: on-failure

  postgresql:
    image: postgres:latest
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - "5432:5432"
    networks:
      - backend
    volumes:
      - postgres_data:/var/lib/postgresql/data
    deploy:
      replicas: 1  # Une seule réplique de la base de données, vu que c'est un service centralisé
      restart_policy:
        condition: on-failure

networks:
  backend:
    driver: overlay  # Utilisation du driver overlay pour les réseaux dans un Swarm

volumes:
  postgres_data:
